import fs from "fs";
import path from "path";
import { compile } from "json-schema-to-typescript";
import schemas from "../common/collections/schemas.js";
import { getDirname, packageJson } from "../common/esmUtils.js";

const disableAdditionalProperties = (node) => {
  if (node.properties) {
    node.additionalProperties = false;
    for (const key of Object.keys(node.properties)) {
      disableAdditionalProperties(node.properties[key]);
    }
  }
  if (node.items) {
    disableAdditionalProperties(node.items);
  }
};

const bsonTypeToTsTypeMap = {
  int: "number",
  date: "Date",
  bool: "boolean",
  objectId: "ObjectId",
};

const computeBsonTypes = (node) => {
  if (node.bsonType !== "object" && !(node.bsonType === "string" && node.enum)) {
    node.tsType = bsonTypeToTsTypeMap[node.bsonType] ?? node.bsonType;
  }

  if (node.properties) {
    for (const key of Object.keys(node.properties)) {
      const field = node.properties[key];
      computeBsonTypes(field);
    }
  }

  if (node.items) {
    computeBsonTypes(node.items);
  }
};

const prepareJsonSchema = (jsonSchema) => {
  const schema = { ...jsonSchema };

  disableAdditionalProperties(schema);
  computeBsonTypes(schema);

  return schema;
};

export function generateTypes() {
  Object.values(schemas).forEach(({ name, schema }) => {
    const jsonSchema = schema();
    const preparedJsonSchema = prepareJsonSchema(jsonSchema);
    compile(preparedJsonSchema, name, {
      bannerComment: `
          /* tslint:disable */
          /**
           * This file was automatically generated by json-schema-to-typescript.
           * DO NOT MODIFY IT BY HAND. Instead, modify the collection schema file,
           * To regenerate this file run $> yarn doc
           */
           import { ObjectId } from "mongodb";

          `,
      style: packageJson.prettier,
    }).then((ts) =>
      fs.writeFileSync(path.resolve(getDirname(import.meta.url), `../common/collections/${name}.d.ts`), ts)
    );
  });
}

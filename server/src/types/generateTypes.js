const fs = require("fs");
const path = require("path");
const { compile } = require("json-schema-to-typescript");
const collections = require("../common/collections/schemas");
const packageJson = require("../../package.json");

const disableAdditionalProperties = (node) => {
  if (node.properties) {
    node.additionalProperties = false;
    for (const key of Object.keys(node.properties)) {
      disableAdditionalProperties(node.properties[key]);
    }
  }
  if (node.items) {
    disableAdditionalProperties(node.items);
  }
};

const bsonTypeToTsTypeMap = {
  int: "number",
  date: "Date",
  bool: "boolean",
  objectId: "ObjectId",
};

const computeBsonTypes = (node) => {
  if (node.bsonType !== "object" && !(node.bsonType === "string" && node.enum)) {
    node.tsType = bsonTypeToTsTypeMap[node.bsonType] ?? node.bsonType;
  }

  if (node.properties) {
    for (const key of Object.keys(node.properties)) {
      const field = node.properties[key];
      computeBsonTypes(field);
    }
  }

  if (node.items) {
    computeBsonTypes(node.items);
  }
};

const prepareJsonSchema = (jsonSchema) => {
  const schema = { ...jsonSchema };

  disableAdditionalProperties(schema);
  computeBsonTypes(schema);

  return schema;
};

const generateTypes = () => {
  Object.values(collections).forEach(({ name, schema }) => {
    const jsonSchema = schema();
    const preparedJsonSchema = prepareJsonSchema(jsonSchema);
    compile(preparedJsonSchema, name, {
      bannerComment: `
          /* tslint:disable */
          /**
           * This file was automatically generated by json-schema-to-typescript.
           * DO NOT MODIFY IT BY HAND. Instead, modify the collection schema file,
           * To regenerate this file run $> yarn doc
           */
           const { ObjectId } = require("mongodb");

          `,
      style: packageJson.prettier,
    }).then((ts) => fs.writeFileSync(path.resolve(__dirname, `../common/collections/${name}.d.ts`), ts));
  });
};

module.exports = { generateTypes };
